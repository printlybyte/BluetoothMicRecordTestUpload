package com.bluetoothmicrecord;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bluetoothmicrecord.bean.BluetoothDevices;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BLUETOOTH_DEVICES".
*/
public class BluetoothDevicesDao extends AbstractDao<BluetoothDevices, Long> {

    public static final String TABLENAME = "BLUETOOTH_DEVICES";

    /**
     * Properties of entity BluetoothDevices.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mac = new Property(1, String.class, "mac", false, "MAC");
        public final static Property DeviceName = new Property(2, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceAccount = new Property(3, String.class, "deviceAccount", false, "DEVICE_ACCOUNT");
        public final static Property DevicePassword = new Property(4, String.class, "devicePassword", false, "DEVICE_PASSWORD");
        public final static Property AddTime = new Property(5, String.class, "addTime", false, "ADD_TIME");
        public final static Property MatchStatus = new Property(6, String.class, "matchStatus", false, "MATCH_STATUS");
        public final static Property ConnectStatus = new Property(7, String.class, "connectStatus", false, "CONNECT_STATUS");
        public final static Property HasRecordAudio = new Property(8, boolean.class, "hasRecordAudio", false, "HAS_RECORD_AUDIO");
    }


    public BluetoothDevicesDao(DaoConfig config) {
        super(config);
    }
    
    public BluetoothDevicesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLUETOOTH_DEVICES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MAC\" TEXT," + // 1: mac
                "\"DEVICE_NAME\" TEXT," + // 2: deviceName
                "\"DEVICE_ACCOUNT\" TEXT," + // 3: deviceAccount
                "\"DEVICE_PASSWORD\" TEXT," + // 4: devicePassword
                "\"ADD_TIME\" TEXT," + // 5: addTime
                "\"MATCH_STATUS\" TEXT," + // 6: matchStatus
                "\"CONNECT_STATUS\" TEXT," + // 7: connectStatus
                "\"HAS_RECORD_AUDIO\" INTEGER NOT NULL );"); // 8: hasRecordAudio
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLUETOOTH_DEVICES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BluetoothDevices entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(3, deviceName);
        }
 
        String deviceAccount = entity.getDeviceAccount();
        if (deviceAccount != null) {
            stmt.bindString(4, deviceAccount);
        }
 
        String devicePassword = entity.getDevicePassword();
        if (devicePassword != null) {
            stmt.bindString(5, devicePassword);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(6, addTime);
        }
 
        String matchStatus = entity.getMatchStatus();
        if (matchStatus != null) {
            stmt.bindString(7, matchStatus);
        }
 
        String connectStatus = entity.getConnectStatus();
        if (connectStatus != null) {
            stmt.bindString(8, connectStatus);
        }
        stmt.bindLong(9, entity.getHasRecordAudio() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BluetoothDevices entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(3, deviceName);
        }
 
        String deviceAccount = entity.getDeviceAccount();
        if (deviceAccount != null) {
            stmt.bindString(4, deviceAccount);
        }
 
        String devicePassword = entity.getDevicePassword();
        if (devicePassword != null) {
            stmt.bindString(5, devicePassword);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(6, addTime);
        }
 
        String matchStatus = entity.getMatchStatus();
        if (matchStatus != null) {
            stmt.bindString(7, matchStatus);
        }
 
        String connectStatus = entity.getConnectStatus();
        if (connectStatus != null) {
            stmt.bindString(8, connectStatus);
        }
        stmt.bindLong(9, entity.getHasRecordAudio() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BluetoothDevices readEntity(Cursor cursor, int offset) {
        BluetoothDevices entity = new BluetoothDevices( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mac
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceAccount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // devicePassword
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // addTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // matchStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // connectStatus
            cursor.getShort(offset + 8) != 0 // hasRecordAudio
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BluetoothDevices entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMac(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceAccount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDevicePassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMatchStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setConnectStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHasRecordAudio(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BluetoothDevices entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BluetoothDevices entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BluetoothDevices entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
